$(function () {
    "use strict";
    $(window).load(function () {
        $("body").addClass("loaded")
    }), $("body").scrollspy({
        target: ".sidebar"
    });
    var o = $("html,body");
    $(".sidebar ul li a").on("click", function (a) {
        o.animate({
            scrollTop: $(this.hash).offset().top
        }, 800, "easeInOutQuart"), a.preventDefault()
    });
    var a = $(".nav"),
        e = $(".toggle-btn");
    e.on("click", function (o) {
        a.hasClass("show-nav") ? a.removeClass("show-nav") : a.addClass("show-nav"), o.stopPropagation()
    }), e.on("click", function () {
        e.hasClass("toggle-close") ? e.removeClass("toggle-close") : e.addClass("toggle-close")
    }), $(document).on("click", function () {
        a.hasClass("show-nav") && a.removeClass("show-nav"), e.hasClass("toggle-close") && e.removeClass("toggle-close")
    }), $(window).on("load resize", function () {
        var o = $(".toggle-btn").offset().top;
        $(window).on("scroll", function () {
            var s = $(window).scrollTop();
            s >= o ? (e.addClass("fixed"), a.addClass("stickyNav")) : (e.removeClass("fixed"), a.removeClass("stickyNav"))
        })
    }), $(window).on("load resize", function () {
        $(window).width() < 768 && (e.wrap('<div class="toggle-placeholder"></div>'), $(".toggle-placeholder").height(e.outerHeight()))
    }), $("#mix-container").mixItUp(), $(".lightbox").magnificPopup({
        type: "inline",
        fixedContentPos: !1,
        removalDelay: 100,
        closeBtnInside: !0,
        preloader: !1,
        mainClass: "mfp-fade"
    }), $("#certificateSlider").owlCarousel({
        loop: !0,
        items: 1,
        margin: 30,
        dotsSpeed: 500,
        autoplay: !0,
        autoplayHoverPause: !0,
        autoplayTimeout: 4e3,
        autoplaySpeed: 500
    })
});

document.addEventListener('DOMContentLoaded', init);

// init App

function init() {
    const txtElement = document.querySelector('.txt-type')
    const words = JSON.parse(txtElement.getAttribute('data-words'))
    const wait = txtElement.getAttribute('data-wait');

    new Typerwriter(txtElement, words, wait)
}


// ES6 classs

class Typerwriter {
    constructor(txtElement, words, wait = 3000) {
        this.txtElement = txtElement
        this.words = words
        this.txt = ''
        this.wordIndex = 0
        this.wait = parseInt(wait, 10)
        this.type();
        this.isDeleting = false;
    }

    type() {
        // current index of word
        const current = this.wordIndex % this.words.length;

        // Get full text of current word
        const fullText = this.words[current]

        // Check if deleting
        if (this.isDeleting) {
            //Removing Char
            this.txt = fullText.substring(0, this.txt.length - 1)

        }
        else {
            // Adding char
            this.txt = fullText.substring(0, this.txt.length + 1)
        }

        //insert txt into element
        this.txtElement.innerHTML = `<span class="txt">${this.txt}</span>`;

        //initial type Speed
        let typeSpeed = 300

        if (this.isDeleting) {
            typeSpeed /= 2
        }

        // checking if word is complete

        if (!this.isDeleting && this.txt === fullText) {
            //pause at end
            typeSpeed = this.wait;

            //set delete to true
            this.isDeleting = true
        }
        else if (this.isDeleting && this.txt === "") {
            this.isDeleting = false;

            //move to next word
            this.wordIndex++;

            //pause b4 start typing
            typeSpeed = 500
        }

        setTimeout(() => this.type(), typeSpeed)
    }
}


// init on DOM load
document.addEventListener('DOMContentLoaded', init);

// init App

function init() {
    const txtElement = document.querySelector('.txt-type')
    const words = JSON.parse(txtElement.getAttribute('data-words'))
    const wait = txtElement.getAttribute('data-wait');

    new Typerwriter(txtElement, words, wait)
}